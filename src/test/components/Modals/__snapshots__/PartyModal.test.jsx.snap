// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PartyModal component should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PartyModal
    hide={[MockFunction]}
    updatePartiesState={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        false,
        <Modal
          ButtonOne={
            <Button
              className="cte-off"
              id="party-btn"
              onClick={[Function]}
              type="submit"
              value="Create office"
            />
          }
          CloseModal={
            <button
              id="btn"
              onClick={[Function]}
              type="button"
            >
              X
            </button>
          }
          Header={
            <Header
              text="Create Party"
            />
          }
          InputOne={
            <Input
              id="hqAddress"
              onChange={[Function]}
              placeholder="enter your address"
              required={true}
              type="text"
              value=""
            />
          }
          InputThree=""
          InputTwo={
            <Input
              id="logoUrl"
              onChange={[Function]}
              placeholder="enter a link to your logo"
              required={true}
              type="text"
              value=""
            />
          }
          Select={
            <Input
              id="name"
              onChange={[Function]}
              placeholder="what will this party be called"
              required={true}
              type="text"
              value=""
            />
          }
          SpanFour=""
          SpanOne={
            <Span
              text="Name: "
            />
          }
          SpanThree={
            <Span
              text="Upload Logo Url"
            />
          }
          SpanTwo={
            <Span
              text="HQ Address: "
            />
          }
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "ButtonOne": <Button
            className="cte-off"
            id="party-btn"
            onClick={[Function]}
            type="submit"
            value="Create office"
          />,
          "CloseModal": <button
            id="btn"
            onClick={[Function]}
            type="button"
          >
            X
          </button>,
          "Header": <Header
            text="Create Party"
          />,
          "InputOne": <Input
            id="hqAddress"
            onChange={[Function]}
            placeholder="enter your address"
            required={true}
            type="text"
            value=""
          />,
          "InputThree": "",
          "InputTwo": <Input
            id="logoUrl"
            onChange={[Function]}
            placeholder="enter a link to your logo"
            required={true}
            type="text"
            value=""
          />,
          "Select": <Input
            id="name"
            onChange={[Function]}
            placeholder="what will this party be called"
            required={true}
            type="text"
            value=""
          />,
          "SpanFour": "",
          "SpanOne": <Span
            text="Name: "
          />,
          "SpanThree": <Span
            text="Upload Logo Url"
          />,
          "SpanTwo": <Span
            text="HQ Address: "
          />,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          false,
          <Modal
            ButtonOne={
              <Button
                className="cte-off"
                id="party-btn"
                onClick={[Function]}
                type="submit"
                value="Create office"
              />
            }
            CloseModal={
              <button
                id="btn"
                onClick={[Function]}
                type="button"
              >
                X
              </button>
            }
            Header={
              <Header
                text="Create Party"
              />
            }
            InputOne={
              <Input
                id="hqAddress"
                onChange={[Function]}
                placeholder="enter your address"
                required={true}
                type="text"
                value=""
              />
            }
            InputThree=""
            InputTwo={
              <Input
                id="logoUrl"
                onChange={[Function]}
                placeholder="enter a link to your logo"
                required={true}
                type="text"
                value=""
              />
            }
            Select={
              <Input
                id="name"
                onChange={[Function]}
                placeholder="what will this party be called"
                required={true}
                type="text"
                value=""
              />
            }
            SpanFour=""
            SpanOne={
              <Span
                text="Name: "
              />
            }
            SpanThree={
              <Span
                text="Upload Logo Url"
              />
            }
            SpanTwo={
              <Span
                text="HQ Address: "
              />
            }
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "ButtonOne": <Button
              className="cte-off"
              id="party-btn"
              onClick={[Function]}
              type="submit"
              value="Create office"
            />,
            "CloseModal": <button
              id="btn"
              onClick={[Function]}
              type="button"
            >
              X
            </button>,
            "Header": <Header
              text="Create Party"
            />,
            "InputOne": <Input
              id="hqAddress"
              onChange={[Function]}
              placeholder="enter your address"
              required={true}
              type="text"
              value=""
            />,
            "InputThree": "",
            "InputTwo": <Input
              id="logoUrl"
              onChange={[Function]}
              placeholder="enter a link to your logo"
              required={true}
              type="text"
              value=""
            />,
            "Select": <Input
              id="name"
              onChange={[Function]}
              placeholder="what will this party be called"
              required={true}
              type="text"
              value=""
            />,
            "SpanFour": "",
            "SpanOne": <Span
              text="Name: "
            />,
            "SpanThree": <Span
              text="Upload Logo Url"
            />,
            "SpanTwo": <Span
              text="HQ Address: "
            />,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
