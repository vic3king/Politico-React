// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InterestFormModal component should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OffficeModal
    hide={[MockFunction]}
    updateOfficesState={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <$class
          options={Object {}}
        />,
        false,
        <Modal
          ButtonOne={
            <Button
              className="cte-off"
              id="office-btn"
              onClick={[Function]}
              type="submit"
              value="Create office"
            />
          }
          CloseModal={
            <button
              id="btn"
              onClick={[Function]}
              type="button"
            >
              X
            </button>
          }
          Header={
            <Header
              text="Create a Political Office:"
            />
          }
          InputOne={
            <Input
              id="name"
              onChange={[Function]}
              placeholder="e.g Local government Chairman"
              required={true}
              type="text"
              value=""
            />
          }
          InputTwo={
            <Input
              id="ageLimit"
              onChange={[Function]}
              placeholder=""
              required={true}
              type="number"
              value=""
            />
          }
          Select={
            <Select
              onChange={[Function]}
            />
          }
          SpanOne={
            <Span
              text="Office Type: "
            />
          }
          SpanThree={
            <Span
              text="AgeLimit"
            />
          }
          SpanTwo={
            <Span
              text="Office: "
            />
          }
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "options": Object {},
        },
        "ref": null,
        "rendered": null,
        "type": [MockFunction],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "ButtonOne": <Button
            className="cte-off"
            id="office-btn"
            onClick={[Function]}
            type="submit"
            value="Create office"
          />,
          "CloseModal": <button
            id="btn"
            onClick={[Function]}
            type="button"
          >
            X
          </button>,
          "Header": <Header
            text="Create a Political Office:"
          />,
          "InputOne": <Input
            id="name"
            onChange={[Function]}
            placeholder="e.g Local government Chairman"
            required={true}
            type="text"
            value=""
          />,
          "InputTwo": <Input
            id="ageLimit"
            onChange={[Function]}
            placeholder=""
            required={true}
            type="number"
            value=""
          />,
          "Select": <Select
            onChange={[Function]}
          />,
          "SpanOne": <Span
            text="Office Type: "
          />,
          "SpanThree": <Span
            text="AgeLimit"
          />,
          "SpanTwo": <Span
            text="Office: "
          />,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <$class
            options={Object {}}
          />,
          false,
          <Modal
            ButtonOne={
              <Button
                className="cte-off"
                id="office-btn"
                onClick={[Function]}
                type="submit"
                value="Create office"
              />
            }
            CloseModal={
              <button
                id="btn"
                onClick={[Function]}
                type="button"
              >
                X
              </button>
            }
            Header={
              <Header
                text="Create a Political Office:"
              />
            }
            InputOne={
              <Input
                id="name"
                onChange={[Function]}
                placeholder="e.g Local government Chairman"
                required={true}
                type="text"
                value=""
              />
            }
            InputTwo={
              <Input
                id="ageLimit"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="number"
                value=""
              />
            }
            Select={
              <Select
                onChange={[Function]}
              />
            }
            SpanOne={
              <Span
                text="Office Type: "
              />
            }
            SpanThree={
              <Span
                text="AgeLimit"
              />
            }
            SpanTwo={
              <Span
                text="Office: "
              />
            }
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "options": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [MockFunction],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "ButtonOne": <Button
              className="cte-off"
              id="office-btn"
              onClick={[Function]}
              type="submit"
              value="Create office"
            />,
            "CloseModal": <button
              id="btn"
              onClick={[Function]}
              type="button"
            >
              X
            </button>,
            "Header": <Header
              text="Create a Political Office:"
            />,
            "InputOne": <Input
              id="name"
              onChange={[Function]}
              placeholder="e.g Local government Chairman"
              required={true}
              type="text"
              value=""
            />,
            "InputTwo": <Input
              id="ageLimit"
              onChange={[Function]}
              placeholder=""
              required={true}
              type="number"
              value=""
            />,
            "Select": <Select
              onChange={[Function]}
            />,
            "SpanOne": <Span
              text="Office Type: "
            />,
            "SpanThree": <Span
              text="AgeLimit"
            />,
            "SpanTwo": <Span
              text="Office: "
            />,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
